name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  packages: write

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build_release:
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            output: deno-cliffy-md-linux
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            output: deno-cliffy-md-windows.exe
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            output: deno-cliffy-md-macos-x86_64
            target: x86_64-apple-darwin
          - os: macos-latest
            output: deno-cliffy-md-macos-arm64
            target: aarch64-apple-darwin

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Remove lockfile (Windows)
        if: runner.os == 'Windows'
        run: Remove-Item -Force -ErrorAction SilentlyContinue deno.lock
        shell: pwsh

      - name: Remove lockfile (Unix)
        if: runner.os != 'Windows'
        run: rm -f deno.lock
        shell: bash

      - name: Cache dependencies
        run: deno cache --reload main.ts

      - name: Build binary
        run: deno compile --allow-read --allow-write --target ${{ matrix.target }} --output ${{ matrix.output }} main.ts

      - name: Set executable permissions (Unix)
        if: runner.os != 'Windows'
        run: chmod +x ${{ matrix.output }}
        shell: bash

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./${{ matrix.output }}
          asset_name: ${{ matrix.output }}
          asset_content_type: application/octet-stream
